{"version":3,"sources":["../src/Contact_two.js"],"names":["Person","constructor","name","id","age","val","_age","_name","Contact","phone","email","nameParts","split","firstName","shift","lastName","join","console","log","toString","length","_phone"],"mappings":";;;;;AAAA,MAAMA,MAAN,CAAa;AACXC,cAAYC,IAAZ,EAAkBC,EAAlB,EAAsBC,GAAtB,EAA2B;AACzB,QAAI,CAACF,IAAD,IAAS,CAACC,EAAd,EAAkB,MAAM,2BAAN;AAClB,SAAKD,IAAL,GAAYA,IAAZ;AACA,QAAIE,GAAJ,EAAS,KAAKA,GAAL,GAAWA,GAAX;AACT,SAAKD,EAAL,GAAUA,EAAV;AACD;;AAED,MAAIC,GAAJ,CAAQC,GAAR,EAAa;AACX;AACA,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B,OAAQ,KAAKC,IAAL,GAAYD,GAApB;AAC7B,UAAM,yBAAN;AACD;;AAED,MAAID,GAAJ,GAAU;AACR,WAAO,KAAKE,IAAZ;AACD;;AAED,MAAIJ,IAAJ,CAASG,GAAT,EAAc;AACZ,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B,OAAQ,KAAKE,KAAL,GAAaF,GAArB;AAC7B,UAAM,0BAAN;AACD;;AAED,MAAIH,IAAJ,GAAW;AACT,WAAO,KAAKK,KAAZ;AACD;AAzBU;;AA4Bb,MAAMC,OAAN,SAAsBR,MAAtB,CAA6B;AAC3BC,cAAYC,IAAZ,EAAkBC,EAAlB,EAAsBC,GAAtB,EAA2BK,KAA3B,EAAkCC,KAAlC,EAAyC;AACvC,QAAIN,GAAJ,EAAS;AACP,YAAMF,IAAN,EAAYC,EAAZ,EAAgBC,GAAhB;AACD,KAFD,MAEO,MAAMF,IAAN,EAAYC,EAAZ;AACP,QAAIO,SAASD,KAAb,EAAoB;AACd,WAAKA,KAAL,GAAaA,KAAb;AACA,WAAKC,KAAL,GAAaA,KAAb;AACD,KAHL,MAGS;AACH,YAAM,2BAAN;AACD;AACL,QAAIC,YAAYT,KAAKU,KAAL,CAAW,GAAX,CAAhB;AACA,SAAKC,SAAL,GAAiBF,UAAUG,KAAV,EAAjB;AACA,SAAKC,QAAL,GAAgBJ,UAAUK,IAAV,CAAe,GAAf,CAAhB;AACD;AACD,MAAIP,KAAJ,CAAUJ,GAAV,EAAc;AACZY,YAAQC,GAAR,CAAY,cAAZ,EAA4Bb,GAA5B;AACGY,YAAQC,GAAR,CAAY,OAAOb,GAAP,KAAgB,QAA5B;AACCY,YAAQC,GAAR,CAAYb,IAAIc,QAAJ,GAAeC,MAA3B;;AAEJ,QAAG,OAAOf,GAAP,KAAgB,QAAhB,IAA4BA,IAAIc,QAAJ,GAAeC,MAAf,IAAyB,CAAxD,EACC,KAAKC,MAAL,GAAchB,GAAd;AACF;AACD,MAAII,KAAJ,GAAW;AACT,WAAO,KAAKY,MAAZ;AACD;AACH;AACA;AACA;AACA;AACA;AACA;;;AA/B6B;;AAqC7B;QACSrB,M,GAAAA,M;QAAQQ,O,GAAAA,O","file":"Contact_two.js","sourcesContent":["class Person {\n  constructor(name, id, age) {\n    if (!name || !id) throw \"Name and id are required.\";\n    this.name = name;\n    if (age) this.age = age;\n    this.id = id;\n  }\n\n  set age(val) {\n    // console.log(val);\n    if (typeof val === \"number\") return (this._age = val);\n    throw \"Age should be a number.\";\n  }\n\n  get age() {\n    return this._age;\n  }\n\n  set name(val) {\n    if (typeof val === \"string\") return (this._name = val);\n    throw \"Name should be a string.\";\n  }\n\n  get name() {\n    return this._name;\n  }\n}\n\nclass Contact extends Person {\n  constructor(name, id, age, phone, email) {\n    if (age) {\n      super(name, id, age);\n    } else super(name, id);\n    if (email && phone) {\n          this.phone = phone;\n          this.email = email;\n        }else{\n          throw \"Phone and email Is needed\";\n        }\n    let nameParts = name.split(\" \");\n    this.firstName = nameParts.shift();\n    this.lastName = nameParts.join(\" \");\n  }\n  set phone(val){\n    console.log(\"Phone number\", val);\n       console.log(typeof(val) === 'number');\n        console.log(val.toString().length);\n\n    if(typeof(val) === 'number' && val.toString().length == 8)\n     this._phone = val;\n  }\n  get phone(){\n    return this._phone;\n  }\n//   console.log(typeof(phone) === 'number');\n//   console.log(phone.length);\n//   if(typeof(phone) === 'number' && phone.length== 8)\n//     this.phone = phone;\n//   if (email.includes(\"@\")) \n//     this.email = email;\n\n\n\n}\n\n// export default Contact;\nexport { Person, Contact };\n"]}